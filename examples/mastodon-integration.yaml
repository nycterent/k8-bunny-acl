# Mastodon Helm Chart Integration with Bunny CDN IP Updater
# 
# This example shows how to integrate the Bunny CDN IP updater with the Mastodon Helm chart
# to automatically configure trusted proxy IPs for proper client IP detection.

---
# First, ensure the Bunny IP updater is deployed in the same namespace as Mastodon
apiVersion: v1
kind: Namespace
metadata:
  name: mastodon
---
# Deploy Bunny IP updater in the mastodon namespace
# (Copy all resources from ../bunny-ip-updater.yaml but change namespace to 'mastodon')
apiVersion: v1
kind: ConfigMap
metadata:
  name: bunny-trusted-ips
  namespace: mastodon
  labels:
    app.kubernetes.io/name: bunny-ip-updater
    app.kubernetes.io/component: config
    app.kubernetes.io/managed-by: cronjob
data:
  TRUSTED_PROXY_IP: ""
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: bunny-ip-updater
  namespace: mastodon
  labels:
    app.kubernetes.io/name: bunny-ip-updater
    app.kubernetes.io/component: rbac
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: bunny-ip-updater
  namespace: mastodon
  labels:
    app.kubernetes.io/name: bunny-ip-updater
    app.kubernetes.io/component: rbac
    security.compliance/audit: "required"
    security.compliance/principle: "least-privilege"
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["bunny-trusted-ips"]
  verbs: ["get", "update", "patch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create", "get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: bunny-ip-updater
  namespace: mastodon
  labels:
    app.kubernetes.io/name: bunny-ip-updater
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: bunny-ip-updater
subjects:
- kind: ServiceAccount
  name: bunny-ip-updater
  namespace: mastodon
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bunny-ip-updater
  namespace: mastodon
  labels:
    app.kubernetes.io/name: bunny-ip-updater
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/version: "1.0.0"
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  timeZone: "UTC"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: bunny-ip-updater
        app.kubernetes.io/component: job
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: bunny-ip-updater
            app.kubernetes.io/component: pod
        spec:
          serviceAccountName: bunny-ip-updater
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: false
            runAsUser: 0  # root user for package installation
            fsGroup: 0
          containers:
          - name: ip-updater
            image: alpine/curl:latest
            imagePullPolicy: Always
            # No hardcoded CUSTOM_TRUSTED_IPS - will be extracted from Mastodon deployment
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: false
              runAsNonRoot: false
              runAsUser: 0
              capabilities:
                drop:
                - ALL
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "üöÄ Starting Bunny CDN IP update for Mastodon..."
              echo "üìÖ Current time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
              
              # Install required tools
              echo "üì¶ Installing required packages..."
              apk add --no-cache jq curl > /dev/null 2>&1
              
              # Install kubectl to /tmp since filesystem is read-only
              echo "üì¶ Installing kubectl..."
              cd /tmp
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" > /dev/null 2>&1
              chmod +x kubectl
              export PATH="/tmp:$PATH"
              
              # Create temporary directory
              TEMP_DIR="/tmp/bunny-updater"
              mkdir -p "$TEMP_DIR"
              TEMP_FILE="$TEMP_DIR/bunny_ips"
              
              # Fetch IPv4 addresses
              echo "üåê Fetching IPv4 addresses from Bunny CDN..."
              if ! curl -f -s --max-time 30 https://bunnycdn.com/api/system/edgeserverlist \
                -H "Accept: application/json" | jq -r '.[]' > "$TEMP_FILE"; then
                echo "‚ùå Failed to fetch IPv4 addresses"
                exit 1
              fi
              
              IPV4_COUNT=$(wc -l < "$TEMP_FILE")
              echo "‚úÖ Fetched $IPV4_COUNT IPv4 addresses"
              
              # Add newline separator
              echo "" >> "$TEMP_FILE"
              
              # Fetch IPv6 addresses
              echo "üåê Fetching IPv6 addresses from Bunny CDN..."
              if ! curl -f -s --max-time 30 https://bunnycdn.com/api/system/edgeserverlist/ipv6 \
                -H "Accept: application/json" | jq -r '.[]' >> "$TEMP_FILE"; then
                echo "‚ùå Failed to fetch IPv6 addresses"
                exit 1
              fi
              
              # Count total IPs and create comma-separated list
              TOTAL_IPS=$(grep -v '^$' "$TEMP_FILE" | wc -l)
              IPV6_COUNT=$((TOTAL_IPS - IPV4_COUNT))
              echo "‚úÖ Fetched $IPV6_COUNT IPv6 addresses"
              echo "üìä Total IP addresses: $TOTAL_IPS"
              
              # Remove empty lines and create comma-separated list
              TRUSTED_IPS=$(grep -v '^$' "$TEMP_FILE" | tr '\n' ',' | sed 's/,$//')
              
              if [ -z "$TRUSTED_IPS" ]; then
                echo "‚ùå No IPs found, aborting update"
                exit 1
              fi
              
              # Create TRUSTED_PROXY_IP with default ranges + custom IPs + Bunny CDN IPs
              DEFAULT_RANGES="127.0.0.1/8,::1/128,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,fc00::/7"
              
              # Extract custom IPs from Mastodon environment ConfigMap
              echo "üîç Checking Mastodon environment ConfigMap for custom trusted IPs..."
              CUSTOM_TRUSTED_IPS=""
              
              # Extract CUSTOM_TRUSTED_IPS from Mastodon env ConfigMap
              # Look for ConfigMaps with Mastodon labels that contain CUSTOM_TRUSTED_IPS
              MASTODON_CONFIG_MAPS=$(kubectl get configmaps -l app.kubernetes.io/name=mastodon -o name 2>/dev/null)
              for CM_NAME in $MASTODON_CONFIG_MAPS; do
                CUSTOM_TRUSTED_IPS=$(kubectl get "$CM_NAME" -o jsonpath='{.data.CUSTOM_TRUSTED_IPS}' 2>/dev/null || echo "")
                if [ -n "$CUSTOM_TRUSTED_IPS" ]; then
                  echo "üìã Found custom trusted IPs in Mastodon configuration"
                  break
                fi
              done
              
              # Add custom IPs if found
              if [ -n "$CUSTOM_TRUSTED_IPS" ]; then
                TRUSTED_PROXY_IP="${DEFAULT_RANGES},${CUSTOM_TRUSTED_IPS},${TRUSTED_IPS}"
                echo "üìã Including custom trusted IPs in configuration"
              else
                TRUSTED_PROXY_IP="${DEFAULT_RANGES},${TRUSTED_IPS}"
                echo "üìã No custom trusted IPs found in Mastodon ConfigMap"
              fi
              
              # Update ConfigMap with TRUSTED_PROXY_IP for Mastodon
              echo "üîÑ Updating ConfigMap for Mastodon..."
              if kubectl patch configmap bunny-trusted-ips \
                --patch="{\"data\":{\"TRUSTED_PROXY_IP\":\"$TRUSTED_PROXY_IP\"}}"; then
                echo "‚úÖ ConfigMap updated successfully!"
                
                # Trigger rolling restart of Mastodon deployments to pick up new ConfigMap
                echo "üîÑ Restarting Mastodon deployments to pick up new trusted proxy IPs..."
                MASTODON_DEPLOYMENTS=$(kubectl get deployments -l app.kubernetes.io/name=mastodon -o name 2>/dev/null)
                if [ -n "$MASTODON_DEPLOYMENTS" ]; then
                  for DEPLOYMENT in $MASTODON_DEPLOYMENTS; do
                    echo "üîÑ Restarting $DEPLOYMENT..."
                    kubectl rollout restart "$DEPLOYMENT"
                  done
                  echo "‚úÖ All Mastodon deployments restarted successfully!"
                else
                  echo "‚ö†Ô∏è  No Mastodon deployments found to restart"
                fi
              else
                echo "‚ùå Failed to update ConfigMap"
                exit 1
              fi
              
              # Log sample IPs for verification
              FIRST_IPS=$(echo "$TRUSTED_IPS" | cut -d',' -f1-3)
              LAST_IPS=$(echo "$TRUSTED_IPS" | rev | cut -d',' -f1-3 | rev)
              echo "üìã Sample IPs (first 3): $FIRST_IPS"
              echo "üìã Sample IPs (last 3): $LAST_IPS"
              
              # Cleanup
              rm -rf "$TEMP_DIR"
              
              echo "üéâ Bunny CDN IP update for Mastodon completed successfully!"
              echo "üí° Mastodon will use these IPs for trusted proxy configuration"
            env:
            - name: TZ
              value: "UTC"
            volumeMounts:
            - name: tmp
              mountPath: /tmp
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
                ephemeral-storage: "100Mi"
              limits:
                memory: "128Mi"
                cpu: "200m"
                ephemeral-storage: "200Mi"
          volumes:
          - name: tmp
            emptyDir: {}